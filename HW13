import Mathlib.Data.Real.Basic
import Mathlib.Tactic.GCongr
import Mathlib.Tactic.IntervalCases
import Mathlib.Tactic.Set
import Library.Theory.Comparison
import Library.Theory.InjectiveSurjective
import Library.Theory.Parity
import Library.Theory.ParityModular
import Library.Theory.Prime
import Library.Tactic.Addarith
import Library.Tactic.Cancel
import Library.Tactic.Define
import Library.Tactic.ExistsDelaborator
import Library.Tactic.Extra
import Library.Tactic.FiniteInductive
import Library.Tactic.Induction
import Library.Tactic.ModCases
import Library.Tactic.Numbers
import Library.Tactic.Product
import Library.Tactic.Rel
import Library.Tactic.Use

set_option push_neg.use_distrib true
open Set

notation:50 a:50 " ⊈ " b:50 => ¬ (a ⊆ b)

/- 3 points -/
theorem problem4a : {a : ℕ | 5 ∣ a} ⊈ {x : ℕ | 20 ∣ x} := by
  dsimp[Set.subset_def]
  dsimp[(.∣.)] at *
  push_neg
  use 5
  constructor
  · use 1
    numbers
  · intro a
    obtain h1 | h2 := le_or_gt a 0
    · have h : 5 > 20 * a := by
        calc
          5 > 0 := by extra
          _ = 20 * 0 := by ring
          _ ≥ 20 * a := by rel[h1]
      apply ne_of_gt h
    · have h2 : a ≥ 1 := by extra
      have h : 5 < 20 * a := by
        calc
          5 < 5 + 15 := by extra
          _ = 20 * 1 := by ring
          _ ≤ 20 * a := by rel[h2]
      apply ne_of_lt h

/- 3 points -/
theorem problem4b : {k : ℤ | 7 ∣ 9 * k} = {l : ℤ | 7 ∣ l} := by
  dsimp
  intro a
  constructor
  . intro h
    obtain ⟨b, c⟩ := h
    use -3*b + 4*a
    calc
      a = -27 * a + 28 * a := by ring
      _ = -3 * ( 9 * a ) + 7 * ( 4 * a) := by ring
      _ = -3 * (7 * b ) + 7 * ( 4 * a) := by rw[c]
      _ = 7 * (-3 * b +  4 * a ) := by ring
  . intro h
    obtain ⟨b, c⟩ := h
    use 9 * b
    rw[c]
    linarith

/- 4 points -/
theorem problem4c : {x : ℝ | x ^ 2 + 3 * x + 2 = 0} = {-1, -2} := by
  ext x
  dsimp
  constructor
  · intro h
    have h1 :=
    calc
      (x + 1) * (x + 2) = x ^ 2 + 3 * x + 2 := by ring
        _ = 0 := by rw [h]
    rw [mul_eq_zero] at h1
    obtain h1 | h1 := h1
    · left
      addarith [h1]
    · right
      addarith [h1]
  · intro h
    obtain h | h := h
    · calc x ^ 2 + 3 * x + 2 = (-1) ^ 2 + 3 * (-1) + 2 := by rw [h]
        _ = 0 := by numbers
    · calc x ^ 2 + 3 * x + 2 = (-2) ^ 2 + 3 * (-2) + 2 := by rw [h]
        _ = 0 := by numbers

/- 3 points -/
theorem problem5a : {r : ℤ | r ≡ 7 [ZMOD 10] }
    ⊆ {s : ℤ | s ≡ 1 [ZMOD 2]} ∩ {t : ℤ | t ≡ 2 [ZMOD 5]} := by
  dsimp
  intro a h
  obtain ⟨b,c⟩:= h
  constructor
  . use (5 * b) +3
    calc
      a-1 = 6+ (a-7) := by ring
      _ = 6 + (10 * b) := by rw[c]
      _ = 2 * (5 * b + 3) := by ring
  . use 1+2*b
    calc
      a-2 = 5 + (a - 7) := by ring
      _ = 5 + 10 * b := by rw[c]
      _ = 5 * (1 + 2 * b) := by ring

/- 3 points -/
theorem problem5b : {n : ℤ | 5 ∣ n} ∩ {n : ℤ | 8 ∣ n} ⊆ {n : ℤ | 40 ∣ n} := by
  dsimp
  intro a h
  obtain ⟨x,hx⟩ := h.left
  obtain ⟨y,hy⟩ := h.right
  use (5 * y) - (3 * x)
  calc
    a = 25 * (a) - 24 * a := by ring
    _ = 25* (8 * y) - 24 * a := by rw[hy]
    _ = 25* (8 * y) - 24 * (5 * x) := by rw[hx]
    _ = 40 * (5 * y -3 * x) := by ring

/- 4 points -/
theorem problem5c :
    {n : ℤ | 3 ∣ n} ∪ {n : ℤ | 2 ∣ n} ⊆ {n : ℤ | n ^ 2 ≡ 1 [ZMOD 6]}ᶜ := by
  sorry
