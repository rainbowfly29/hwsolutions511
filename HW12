import Mathlib.Data.Real.Basic
import Mathlib.Tactic.IntervalCases
import Library.Theory.Comparison
import Library.Theory.Parity
import Library.Theory.ParityModular
import Library.Theory.Prime
import Library.Theory.InjectiveSurjective
import Mathlib.Tactic.Set
import Library.Tactic.ExistsDelaborator
import Library.Tactic.FiniteInductive
import Library.Tactic.Induction
import Library.Tactic.Rel
import Library.Tactic.ModCases
import Mathlib.Tactic.GCongr
import Library.Tactic.Extra
import Library.Tactic.Numbers
import Library.Tactic.Addarith
import Library.Tactic.Cancel
import Library.Tactic.Use
import Library.Tactic.Product

set_option push_neg.use_distrib true
open Function

theorem bijective_of_inverse {f : X → Y} {g : Y → X} (h : Inverse f g) :
    Bijective f := by
  dsimp [Inverse] at h
  obtain ⟨hgf, hfg⟩ := h
  constructor
  · -- `f` is injective
    intro x1 x2 hx
    calc x1 = id x1 := by rfl
      _ = (g ∘ f) x1 := by rw [hgf]
      _ = g (f x1) := by rfl
      _ = g (f x2) := by rw [hx]
      _ = (g ∘ f) x2 := by rfl
      _ = id x2 := by rw [hgf]
      _ = x2 := by rfl
  · -- `f` is surjective
    intro y
    use g y
    calc f (g y) = (f ∘ g) y := by rfl
      _ = id y := by rw [hfg]
      _ = y := by rfl

/- 3 points -/
theorem problem4a {f : X → Y} (hf : Surjective f) {g : Y → Z} (hg : Surjective g) :
    Surjective (g ∘ f) := by
  dsimp[Surjective] at hf
  dsimp[Surjective] at hg
  dsimp[Surjective]
  intro a
  have x := (hg a)
  obtain ⟨a,ha⟩ := x
  have y := (hf a)
  obtain ⟨b,hb⟩ := y
  use b
  rw[hb]
  rw[ha]

/- 2 points -/
theorem problem4b {f : X → Y} (hf : Surjective f) : ∃ g : Y → X, f ∘ g = id := by
  dsimp [Surjective]
  choose g x using hf
  use g
  ext a
  apply x

/- 2 points -/
theorem problem4c {f : X → Y} {g : Y → X} (h : Inverse f g) : Inverse g f := by
  dsimp[Inverse]
  obtain ⟨x, y⟩ := h
  constructor
  . apply y
  . apply x

/- 3 points -/
theorem problem4d {f : X → Y} {g1 g2 : Y → X} (h1 : Inverse f g1) (h2 : Inverse f g2) :
    g1 = g2 := by
  dsimp[Inverse]
  ext a
  have ha := (g1 a)
  have hb := (g2 a)
  have hf := bijective_of_inverse h1
  dsimp[Bijective, Injective, Surjective] at hf
  obtain ⟨hi,hs⟩ := hf
  obtain ⟨x, hfx⟩ := hs a
  have hfx': a = f x := by rw[hfx]
  rw [hfx']
  dsimp[Inverse] at h1
  obtain ⟨ha1, hm⟩ := h1
  obtain ⟨hb2,hn⟩ := h2
  calc
    g1 (f x) = (g1 ∘ f) x := by rfl
    _ = id x := by rw[ha1]
    _ = (g2 ∘ f) x := by rw[hb2]
    _ = g2 (f x) := by rfl

/- 1 points -/
theorem problem5a1 : ¬ Injective (fun ((x, y) : ℤ × ℤ) ↦ x - 2 * y - 1) := by
  dsimp[Injective]
  push_neg
  use (0,0), (2, 1)
  ring

/- 1 points -/
theorem problem5a2 : Surjective (fun ((x, y) : ℤ × ℤ) ↦ x - 2 * y - 1) := by
  dsimp[Surjective]
  intro m
  use (m + 1, 0)
  ring

/- 2 points -/
theorem problem5b : ¬ Surjective (fun ((x, y) : ℚ × ℚ) ↦ x ^ 2 + y ^ 2) := by
  dsimp[Surjective]
  push_neg
  use -1
  intro m
  have n : m.fst ^ 2 + m.snd ^ 2 > -1 := by
    calc
      m.fst ^ 2 + m.snd ^ 2 ≥ m.fst ^ 2 + 0 := by extra
      _ ≥ 0 + 0 := by extra
      _ > -1 := by ring
  apply ne_of_gt n

/- 3 points -/
theorem problem5c : ¬ Injective
    (fun ((x, y, z) : ℝ × ℝ × ℝ) ↦ (x + y + z, x + 2 * y + 3 * z)) := by
  dsimp[Injective]
  push_neg
  use (0,0,0), (1, -2, 1)
  ring
  constructor
  . ring
  . numbers

/- 3 points -/
theorem problem5d : Injective (fun ((x, y) : ℝ × ℝ) ↦ (x + y, x + 2 * y, x + 3 * y)) := by
  dsimp[Injective]
  intro x y h
  obtain ⟨a, b, c⟩ := h
  calc
    x = (x.fst, x.snd) := by ring
    _ = (2*(x.fst + x.snd)-(x.fst + 2*x.snd), (x.fst+2 * x.snd)-(x.fst + x.snd)) := by ring
    _ = (2*(y.fst + y.snd)-(y.fst + 2* y.snd), (x.fst+2 * x.snd)-(x.fst + x.snd)) := by rw[a, b]
    _ = (2*(y.fst + y.snd)-(y.fst + 2*y.snd), (y.fst+2 * y.snd)-(y.fst + y.snd)) := by rw[a, b]
    _ = (y.fst, y.snd) := by ring
    _ = y := by ring
